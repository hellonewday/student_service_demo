/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DefaultResponse;
import io.swagger.model.Student;
import io.swagger.model.StudentResponse;
import io.swagger.model.StudentsResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-07-26T06:52:10.121Z[GMT]")
@Validated
public interface StudentsApi {

    @Operation(summary = "Thêm sinh viên mới", description = "", security = {
        @SecurityRequirement(name = "key")    }, tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Khởi tạo thành công", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultResponse.class))) })
    @RequestMapping(value = "/students",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DefaultResponse> publicCreateStudents(@Parameter(in = ParameterIn.DEFAULT, description = "Thêm sinh viên mới vào hệ thống", schema=@Schema()) @Valid @RequestBody Student body);


    @Operation(summary = "Xóa sinh viên", description = "", security = {
        @SecurityRequirement(name = "key")    }, tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Thao tác thành công", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultResponse.class))) })
    @RequestMapping(value = "/students/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DefaultResponse> publicDeleteStudentsById(@Parameter(in = ParameterIn.PATH, description = "Xóa sinh viên trong hệ thống", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Liệt kê danh sách sinh viên", description = "", tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Thao tác thành công", content = @Content(mediaType = "application/json", schema = @Schema(implementation = StudentsResponse.class))) })
    @RequestMapping(value = "/students",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudentsResponse> publicFindStudents();


    @Operation(summary = "Lấy thông tin chi tiết của sinh viên", description = "", security = {
        @SecurityRequirement(name = "key")    }, tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Thao tác thành công", content = @Content(mediaType = "application/json", schema = @Schema(implementation = StudentResponse.class))) })
    @RequestMapping(value = "/students/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudentResponse> publicFindStudentsById(@Parameter(in = ParameterIn.PATH, description = " Id của student", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Sửa thông tin sinh viên", description = "", security = {
        @SecurityRequirement(name = "key")    }, tags={ "Students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Thao tác thành công", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultResponse.class))) })
    @RequestMapping(value = "/students/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<DefaultResponse> publicUpdateStudents(@Parameter(in = ParameterIn.PATH, description = "Sửa thông tin theo mã sinh viên", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "Dữ liệu sinh viên cần sửa trong hệ thống", schema=@Schema()) @Valid @RequestBody Student body);

}

